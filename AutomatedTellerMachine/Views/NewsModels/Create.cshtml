@model AutomatedTellerMachine.Models.NewsModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>NewsModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.NewsTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewsTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewsTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewsImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewsImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewsImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewsPart1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewsPart1, new { htmlAttributes = new { @class = "form-control", data_bind = "value:message, valueUpdate:'input'", name = "message", id = "message", maxlength = "1000" } })
                @Html.ValidationMessageFor(model => model.NewsPart1, "", new { @class = "text-danger" })
            </div>
            <div>
                <span class="col-md-3"></span>
                <span data-bind="text:charactersRemaining"></span> characters remaining
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VideoUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="urllabel">
                @Html.EditorFor(model => model.VideoUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VideoUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewsPart2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewsPart2, new { htmlAttributes = new { @class = "form-control", data_bind="value:message2, valueUpdate:'input'", name="message", id="message", maxlength="1000" } })
                @Html.ValidationMessageFor(model => model.NewsPart2, "", new { @class = "text-danger" })
            </div>
            <div>
                <span class="col-md-3"></span>
                <span data-bind="text:charactersRemaining2"></span> characters remaining
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section scripts {
    <script src="~/Scripts/knockout-3.3.0.js"></script>
    <script>
        function ContactViewModel() {
            var self = this;
            self.message = ko.observable('');
            self.charactersRemaining = ko.computed(function () { return 1000 - self.message().length; });

            self.message2 = ko.observable('');
            self.charactersRemaining2 = ko.computed(function () { return 1000 - self.message2().length; });
        }

        ko.applyBindings(new ContactViewModel());
    </script>
}